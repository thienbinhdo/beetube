<?php

/**
 * @file
 * This module provides wysiwyg support for token insert.
 */
function token_insert_wysiwyg_wysiwyg_include_directory($type) {
  switch ($type) {
    case 'plugins':
      return $type;
  }
}

/**
 * Implements hook_element_info_alter().
 */
function token_insert_wysiwyg_element_info_alter(&$types) {
  $types['text_format']['#pre_render'][] = 'token_insert_wysiwyg_pre_render_text_format';
}

function token_insert_wysiwyg_pre_render_text_format($element) {
  // filter_process_format() copies properties to the expanded 'value' child
  // element. Skip this text format widget, if it contains no 'format' or when
  // the current user does not have access to edit the value.
  if (!isset($element['format']) || !empty($element['value']['#disabled'])) {
    return $element;
  }
  // WYSIWYG module allows modules to programmatically enforce no client-side
  // editor by setting the #wysiwyg property to FALSE.
  if (isset($element['#wysiwyg']) && !$element['#wysiwyg']) {
    return $element;
  }
  $element['#attached']['library'][] = array('system', 'ui.dialog');
  $element['#attached']['library'][] = array('system', 'ui.draggable');
  return $element;
}

function token_insert_wysiwyg_menu() {

  $items = array();
  $items['token_insert_wysiwyg/insert'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('token_insert_wysiwyg_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function token_insert_wysiwyg_form($form, $form_state) {
  module_load_include('inc', 'token_insert', 'token_insert');
  drupal_set_title(t('Insert token'));
  $options = token_insert_get_tokens();

  $form = array();
  $form['insert'] = array(
    '#type' => 'select',
    '#title' => t('Choose the token you want to insert.'),
    '#options' => $options,
    '#description' => t('This token will be inserted in your textfield')
  );

  return $form;
}
